C#にて剛体に加わった複数の力の合成を求めるプログラムが欲しい、ただし、力はすべて異なる作用点、異なるベクトルからくわえられている。複数の力はVector3型の作用点の座標とVector3型の力のベクトルの二つの情報の組み合わせで与えられ,合成した力は剛体の重心を作用点としたVector3型の力のベクトルとVector3型のトルクの組み合わせで表す

以下のようなプログラムを作成することができます。

Copy code
using UnityEngine;

public class ForceComposer
{
    // 力のリスト
    private List<Force> forces = new List<Force>();

    // 重心
    private Vector3 centerOfMass;

    // 力を加えるメソッド
    public void AddForce(Vector3 position, Vector3 force)
    {
        forces.Add(new Force(position, force));
    }

    // 合成力を求めるメソッド
    public (Vector3, Vector3) GetCompositeForce()
    {
        Vector3 compositeForce = Vector3.zero;
        Vector3 compositeTorque = Vector3.zero;

        // 合成力を求める
        foreach (var force in forces)
        {
            compositeForce += force.ForceVector;

            // トルクを求める
            var r = force.Position - centerOfMass;
            compositeTorque += Vector3.Cross(r, force.ForceVector);
        }

        return (compositeForce, compositeTorque);
    }
}

// 力を表す構造体
public struct Force
{
    public Vector3 Position { get; }
    public Vector3 ForceVector { get; }

    public Force(Vector3 position, Vector3 forceVector)
    {
        Position = position;
        ForceVector = forceVector;
    }
}
使用方法:

Copy code
var composer = new ForceComposer();
composer.centerOfMass = new Vector3(0, 0, 0); // 重心を設定
composer.AddForce(new Vector3(1, 2, 3), new Vector3(4, 5, 6)); // 力を加える
var (force, torque) = composer.GetCompositeForce(); // 合成力を求める
上記のプログラムでは、AddForceメソッドで力を加え、GetCompositeForceメソッドで合成力を求めることができます。また、合成力は、Vector3型の作用点の座標とVector3型の力のベクトルの二つの情報の組み合わせで表され、合成した力は剛体の重心を作用点としたVector3型の力のベクトルとVector3型のトルクの組み合わせで表すことができます。
