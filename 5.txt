c#にて剛体に対し複数の力を加えたと仮定し、それぞれの力をVector3型の座標、Vector3型の力のベクトルで与えられたとき、複数の力の合力をVector3型の着力点の座標、Vector3型の力のベクトルの値で返すプログラムが欲しい。
複数の力を受ける剛体に対して、それぞれの力を着力点の座標と力のベクトルで与えられたとき、それらの力を合成した結果の力を返すプログラムは次のようになります。

Copy code
Vector3 CalculateTotalForce(List<Tuple<Vector3, Vector3>> forces) {
    Vector3 totalForce = Vector3.zero;
    Vector3 totalPosition = Vector3.zero;
    float totalForceMagnitude = 0;
    foreach (var force in forces) {
        totalForce += force.Item2;
        totalPosition += force.Item1 * force.Item2.magnitude;
        totalForceMagnitude += force.Item2.magnitude;
    }
    totalPosition = totalPosition / totalForceMagnitude;
    return Tuple.Create(totalPosition, totalForce);
}
上記のコードでは、入力として与えられた forces リストに格納されている力を、着力点の座標と力のベクトルで反復処理し、合成する結果の力を計算して返します。

totalForce - 合成後の力のベクトル
totalPosition - 合成後の着力点の座標
totalForceMagnitude - 合成後の力の大きさ

例えば、forces = { ( (1, 2, 3), (3, 4, 5) ), ( (5, 6, 7), (7, 8, 9) ) }
上記のリストを関数に入力すると、
( ( (13)+(57) )/(3+7), ( (23)+(67) )/(3+7), ( (33)+(77) )/(3+7) ) , ((3+7), (4+8), (5+9))
となります。



このプログラムは加えた力が平行だったりした時も正しく機能する？
上記のプログラムでは、入力として与えられた力のリストを反復処理し、合成する結果の力を計算しています。それぞれの力は着力点の座標と力のベクトルで与えられています。
このプログラムは力が平行だった場合にも正しく機能します。
ただし、 力の大きさが同じである場合は（着力点の座標が同じ）力の合成結果はその力の大きさの和になり、着力点座標は平行な力を負荷した剛体の中心になる。

なお、これらの力が互いに平行である場合、合成結果はそれらの力の大きさの和になり、着力点は平行な力を負荷した剛体の中心になります。

また、もし力を合成した結果の力の着力点が意味を成さないのであれば、着力点については無視して、合成後の力のベクトルのみを返すことも可能です。



逆に一つの力に対して力を複数座標に分散するときの計算はできる？
入力にはtotalForce,tortalPotisionとVector3型で分散先の座標を与える
出力に各分散先の座標に対して与えるVector3型での力のベクトルを返す
一つの力を複数の座標に分散するための計算を行うプログラムは、次のようになります。

Copy code
List<Tuple<Vector3, Vector3>> DivideForce(Vector3 totalForce, Vector3 totalPosition, List<Vector3> positions) {
    var forces = new List<Tuple<Vector3, Vector3>>();
    foreach (var position in positions) {
        Vector3 direction = (position - totalPosition).normalized;
        Vector3 force = totalForce.magnitude * direction;
        forces.Add(Tuple.Create(position, force));
    }
    return forces;
}
このコードでは、入力として与えられた totalForce、totalPosition、および分散先の座標のリスト positions を反復処理し、それぞれの分散先の座標に対しての力を計算して返します。

totalForce - 分散する力のベクトル
totalPosition - 分散する力の着力点
position - 分散先の座標
direction - 分散先の座標から着力点への方向
force - 分散先の座標に対する力のベクトル

例えば、totalForce = (3, 4, 5), totalPosition = (1, 2, 3) positions = {(4, 5, 6), (7, 8, 9)}
上記を関数に入力すると、
{( (4, 5, 6), ((3/sqrt(3^2+3^2+3^2))*3, (4/sqrt(3^2+3^2+3^2))*4, (5/sqrt(3^2+3^2+3^2))*5) ), ( (7, 8, 9), ((3/sqrt(4^2+6^2+6^2))*3, (4/sqrt(4^2+6^2+6^2))*4, (5/sqrt(4^2+6^2+6^2))*5) )}
となります。

なお、分散先の座標が一つでも着力点と同じ場合、その点に対する力のベクトルはtotalForceと同じになります。
また、ここでは分散先の座標に対して力の大きさが等しいものとして計算していますが、実際



続けて
実際にはそれぞれの座標に対して力の大きさが異なる場合があります。その場合は、分散先の座標に対する力の大きさを考慮した計算を行うことが必要です。
また、このコードは力の分散方向が等しいものとして計算をしているので、分散方向が異なる場合はそれに合わせた計算を行うことが必要です。